name: CD

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 awscli
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Create or update IAM role
        run: |
          ROLE_NAME="EC2DevInstanceSchedulerRole"
          if ! aws iam get-role --role-name $ROLE_NAME > /dev/null 2>&1; then
            aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document file://iam/trust_policy.json
          fi
          aws iam put-role-policy --role-name $ROLE_NAME --policy-name EC2DevInstanceSchedulerPolicy --policy-document file://iam/lambda_role_policy.json
      - name: Create or update Lambda function
        run: |
          FUNCTION_NAME="EC2DevInstanceScheduler"
          ROLE_ARN=$(aws iam get-role --role-name EC2DevInstanceSchedulerRole --query 'Role.Arn' --output text)
          zip -j deployment.zip src/lambda_function.py
          if ! aws lambda get-function --function-name $FUNCTION_NAME > /dev/null 2>&1; then
            aws lambda create-function --function-name $FUNCTION_NAME \
              --runtime python3.11 --role $ROLE_ARN \
              --handler lambda_function.lambda_handler \
              --zip-file fileb://deployment.zip \
              --timeout 60
          else
            aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://deployment.zip
            for i in {1..5}; do
              if aws lambda update-function-configuration --function-name $FUNCTION_NAME --timeout 60; then
                echo "Function configuration updated successfully"
                break
              else
                echo "Update failed, retrying in 10 seconds..."
                sleep 10
              fi
            done
          fi
      - name: Create or update EventBridge rule
        run: |
          RULE_NAME="EC2DevInstanceScheduler"
          LAMBDA_ARN=$(aws lambda get-function --function-name EC2DevInstanceScheduler --query 'Configuration.FunctionArn' --output text)
          if ! aws events describe-rule --name $RULE_NAME > /dev/null 2>&1; then
            aws events put-rule --name $RULE_NAME \
              --schedule-expression "cron(57 18 * * ? *)" \
              --state ENABLED \
              --description "Triggers Lambda function to stop Dev EC2 instances daily at 2:35 PM ET"
            aws events put-targets --rule $RULE_NAME --targets "Id"="1","Arn"="$LAMBDA_ARN"
          else
            aws events put-rule --name $RULE_NAME \
              --schedule-expression "cron(57 18 * * ? *)" \
              --state ENABLED \
              --description "Triggers Lambda function to stop Dev EC2 instances daily at 2:35 PM ET"
            aws events put-targets --rule $RULE_NAME --targets "Id"="1","Arn"="$LAMBDA_ARN"
          fi
      - name: Add or update Lambda permission for EventBridge
        run: |
          FUNCTION_NAME="EC2DevInstanceScheduler"
          RULE_ARN=$(aws events describe-rule --name EC2DevInstanceScheduler --query 'Arn' --output text)
          EXISTING_POLICY=$(aws lambda get-policy --function-name $FUNCTION_NAME --query 'Policy' --output text 2>/dev/null || echo '')
          if [[ $EXISTING_POLICY != *"EventBridgeInvoke"* ]]; then
            aws lambda add-permission \
              --function-name $FUNCTION_NAME \
              --statement-id EventBridgeInvoke \
              --action lambda:InvokeFunction \
              --principal events.amazonaws.com \
              --source-arn $RULE_ARN
          else
            echo "Permission already exists. Skipping add-permission."
          fi
